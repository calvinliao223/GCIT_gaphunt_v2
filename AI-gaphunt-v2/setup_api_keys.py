#!/usr/bin/env python3
"""
Secure API Key Setup Script for Gap Hunter Bot
SECURITY: This script helps users set up their own API keys securely
"""

import os
import sys
import getpass
from pathlib import Path

def interactive_setup():
    """Interactive setup to collect API keys from user"""
    print("üîê SECURE API KEY SETUP")
    print("=" * 50)
    print("This script will help you set up your API keys securely.")
    print("‚ö†Ô∏è  NEVER share your API keys with anyone!")
    print("üìñ See .env.example for more information about each key.")
    print()

    api_keys = {}

    # Required API keys
    required_keys = {
        "GOOGLE_API_KEY": "Google API Key (for research databases)",
        "S2_API_KEY": "Semantic Scholar API Key",
        "CORE_API_KEY": "CORE API Key",
        "CONTACT_EMAIL": "Your contact email"
    }

    # Optional LLM provider keys
    optional_keys = {
        "OPENAI_API_KEY": "OpenAI API Key (for GPT models)",
        "ANTHROPIC_API_KEY": "Anthropic API Key (for Claude models)",
        "GEMINI_API_KEY": "Google Gemini API Key (can be same as Google API Key)"
    }

    print("üìã REQUIRED API KEYS:")
    print("-" * 30)
    for key, description in required_keys.items():
        if key == "CONTACT_EMAIL":
            value = input(f"Enter {description}: ").strip()
        else:
            value = getpass.getpass(f"Enter {description} (hidden): ").strip()

        if value:
            api_keys[key] = value
            print(f"‚úÖ {key} set")
        else:
            print(f"‚ö†Ô∏è  {key} not set (required for basic functionality)")

    print("\nüìã OPTIONAL LLM PROVIDER KEYS (at least one recommended):")
    print("-" * 60)
    for key, description in optional_keys.items():
        value = getpass.getpass(f"Enter {description} (hidden, optional): ").strip()
        if value:
            api_keys[key] = value
            print(f"‚úÖ {key} set")

    return api_keys

def create_env_file(api_keys):
    """Create .env file with user's API keys"""
    env_file = Path(".env")

    # Backup existing .env file if it exists
    if env_file.exists():
        backup_file = Path(".env.backup")
        env_file.rename(backup_file)
        print(f"üìÅ Existing .env file backed up to {backup_file}")

    # Create new .env file
    with open(env_file, "w") as f:
        f.write("# Gap Hunter Bot - Environment Variables\n")
        f.write("# Generated by secure setup script\n")
        f.write("# NEVER commit this file to version control!\n\n")

        f.write("# ============================================================================\n")
        f.write("# CORE API KEYS (Required for basic functionality)\n")
        f.write("# ============================================================================\n\n")

        core_keys = ["GOOGLE_API_KEY", "S2_API_KEY", "CORE_API_KEY", "CONTACT_EMAIL"]
        for key in core_keys:
            if key in api_keys:
                f.write(f'{key}="{api_keys[key]}"\n')
            else:
                f.write(f'# {key}=your_{key.lower()}_here\n')

        f.write("\n# ============================================================================\n")
        f.write("# LLM PROVIDER API KEYS (At least one required)\n")
        f.write("# ============================================================================\n\n")

        llm_keys = ["OPENAI_API_KEY", "ANTHROPIC_API_KEY", "GEMINI_API_KEY"]
        for key in llm_keys:
            if key in api_keys:
                f.write(f'{key}="{api_keys[key]}"\n')
            else:
                f.write(f'# {key}=your_{key.lower()}_here\n')

    print(f"\n‚úÖ API keys saved to {env_file}")
    print("üîí Keep this file secure and don't share it!")
    print("üìñ The .env file is already excluded from git tracking")

    return env_file

def load_env_file():
    """Load environment variables from .env file"""
    env_file = Path(".env")
    if env_file.exists():
        with open(env_file, "r") as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith("#") and "=" in line:
                    key, value = line.split("=", 1)
                    # Remove quotes if present
                    value = value.strip('"\'')
                    os.environ[key] = value
        print("‚úÖ Loaded API keys from .env file")
        return True
    return False

def verify_api_keys():
    """Verify that all required API keys are set"""
    # Core required keys
    core_keys = ["GOOGLE_API_KEY", "S2_API_KEY", "CORE_API_KEY", "CONTACT_EMAIL"]

    # LLM provider keys (at least one required)
    llm_keys = ["OPENAI_API_KEY", "ANTHROPIC_API_KEY", "GEMINI_API_KEY"]

    missing_core = []
    for key in core_keys:
        if not os.getenv(key):
            missing_core.append(key)

    available_llm = []
    for key in llm_keys:
        if os.getenv(key):
            available_llm.append(key)

    success = True

    if missing_core:
        print(f"‚ùå Missing required core API keys: {', '.join(missing_core)}")
        success = False
    else:
        print("‚úÖ All core API keys are set")

    if not available_llm:
        print("‚ùå No LLM provider API keys found")
        print("üí° Please set at least one: OPENAI_API_KEY, ANTHROPIC_API_KEY, or GEMINI_API_KEY")
        success = False
    else:
        print(f"‚úÖ LLM providers available: {', '.join(available_llm)}")

    return success

def main():
    """Main setup function"""
    print("üîë Gap Hunter Bot - Secure API Key Setup")
    print("=" * 50)

    # Check if .env file already exists
    env_file = Path(".env")
    if env_file.exists():
        print("üìÅ Found existing .env file")
        choice = input("Do you want to (l)oad existing, (r)ecreate, or (e)xit? [l/r/e]: ").lower().strip()

        if choice == 'e':
            print("üëã Exiting setup")
            return
        elif choice == 'r':
            print("üîÑ Setting up new API keys...")
            api_keys = interactive_setup()
            create_env_file(api_keys)
        else:  # default to load
            print("üìñ Loading existing .env file...")
            load_env_file()
    else:
        print("üìù No .env file found. Starting interactive setup...")
        api_keys = interactive_setup()
        create_env_file(api_keys)

    print("\nüîç Verifying API key configuration...")
    if verify_api_keys():
        print("\nüöÄ Setup complete! Gap Hunter Bot is ready to use.")
        print("üí° To start the web interface, run: python web/launch_web_app.py")
    else:
        print("\n‚ö†Ô∏è  Setup incomplete. Please check the missing API keys above.")
        print("üìñ See .env.example for more information about obtaining API keys.")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã Setup cancelled by user")
    except Exception as e:
        print(f"\n‚ùå Setup error: {e}")
        print("üí° Please check your input and try again")
